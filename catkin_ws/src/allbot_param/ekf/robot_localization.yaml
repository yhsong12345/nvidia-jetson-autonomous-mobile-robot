map_frame: map                  # Defaults to "map" if unspecified
odom_frame: odom                # Defaults to "odom" if unspecified
base_link_frame: base_footprint # Defaults to "base_link" if unspecified
world_frame: odom               # Defaults to the value of odom_frame if unspecified

frequency: 50                   # Defaults to 30(Hz) if unspecified, Hz of publishing '/odom' topic  

two_d_mode: true                # If true, 3D motion model is not used, default is 'false'  
diagnostics_agg: true           # If having trouble, try setting this to true, 
                                # and then echo the /diagnostics_agg topic to see  

#==================================================================
# 'odom0_config's parameter values meaning 
#==================================================================
# position           : x            , y              , z,
# orientation        : roll         , pitch         , yaw,
# linear velocity    : x velocity   , y velocity    , z velocity,
# angular velocity   : roll velocity, pitch velocity, yaw velocity,
# linear acceleration: x accel      , y accel       , z accel
#==================================================================
# x_pos   , y_pos    , z_pos,
# roll    , pitch    , yaw,
# x_vel   , y_vel    , z_vel,
# roll_vel, pitch_vel, yaw_vel,
# x_accel , y_accel  , z_accel
#==================================================================

odom0: /raw_odom
#org odom0_config: [false, false, false,
#                   false, false, false,
#                   true, true, false,
#                   false, false, true,
#                   false, false, false]
odom0_config: [false, false, false,  #pose:pose:position/x/y/z    (of /raw_odom)
               false, false, false,  #pose:pose:orientation/x/y/z
               true,  true,  false,  #twist:twist:linear/x/y/z
               false, false, true,   #twist:twist:angular/x/y/z
               false, false, false]  #non

odom0_differential: true
odom0_relative: false

imu0: /imu/data

# NOTE: If you find that your robot has x drift,
# the most likely candidate is the x'' (acceleration) fr$
# Just set it to false! (It's the first entry on the las$
#org imu0_config: [false, false, false,
#                  false, false, true,
#                  false, false, false,
#                  false, false, true,
#                  false, false, false]
imu0_config: [false, false, false,     
              false, false, true,
              false, false, false,
              false, false, true,
              false, false, false]

imu0_differential: true
imu0_relative: true


# default 'process_noise_covariance'
##                          x,    y,    z,   roll, pitch, yaw,  vx,    vy,   vz, vroll, vpitch, vyaw, ax,  ay,   az
process_noise_covariance: [0.05, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,    # x   
                           0,    0.05, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,    # y
                           0,    0,    0.06, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,    # z
                           0,    0,    0,    0.03, 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,    # roll
                           0,    0,    0,    0,    0.03, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,    # pitch
                           0,    0,    0,    0,    0,    0.06, 0,     0,     0,    0,    0,    0,    0,    0,    0,    # yaw
                           0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,    # vx   (linear/x)
                           0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,    # vy   (linear/y)
                           0,    0,    0,    0,    0,    0,    0,     0,     0.04, 0,    0,    0,    0,    0,    0,    # vz
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0.01, 0,    0,    0,    0,    0,    # vroll
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.01, 0,    0,    0,    0,    # vpitch
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,    # vyaw  (angular/z)
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,    # ax
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,    # ay
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.15] # az

# Test 1 of 'process_noise_covariance'
##                          x,    y,     z,   roll,  pitch,  yaw,   vx,      vy,    vz,   vroll,  vpitch, vyaw, ax,    ay,    az
#process_noise_covariance: [0.005, 0,     0,     0,     0,     0,     0,      0,      0,     0,     0,     0,     0,     0,     0,    # x   
#                           0,     0.005, 0,     0,     0,     0,     0,      0,      0,     0,     0,     0,     0,     0,     0,    # y
#                           0,     0,     0.006, 0,     0,     0,     0,      0,      0,     0,     0,     0,     0,     0,     0,    # z
#                           0,     0,     0,     0.003, 0,     0,     0,      0,      0,     0,     0,     0,     0,     0,     0,    # roll
#                           0,     0,     0,     0,     0.003, 0,     0,      0,      0,     0,     0,     0,     0,     0,     0,    # pitch
#                           0,     0,     0,     0,     0,     0.006, 0,      0,      0,     0,     0,     0,     0,     0,     0,    # yaw
#                           0,     0,     0,     0,     0,     0,     0.0025, 0,      0,     0,     0,     0,     0,     0,     0,    # vx   (linear/x)
#                           0,     0,     0,     0,     0,     0,     0,      0.0025, 0,     0,     0,     0,     0,     0,     0,    # vy   (linear/y)
#                           0,     0,     0,     0,     0,     0,     0,      0,      0.004, 0,     0,     0,     0,     0,     0,    # vz
#                           0,     0,     0,     0,     0,     0,     0,      0,      0,     0.001, 0,     0,     0,     0,     0,    # vroll
#                           0,     0,     0,     0,     0,     0,     0,      0,      0,     0,     0.001, 0,     0,     0,     0,    # vpitch
#                           0,     0,     0,     0,     0,     0,     0,      0,      0,     0,     0,     0.002, 0,     0,     0,    # vyaw  (angular/z)
#                           0,     0,     0,     0,     0,     0,     0,      0,      0,     0,     0,     0,     0.001, 0,     0,    # ax
#                           0,     0,     0,     0,     0,     0,     0,      0,      0,     0,     0,     0,     0,     0.001, 0,    # ay
#                           0,     0,     0,     0,     0,     0,     0,      0,      0,     0,     0,     0,     0,     0,     0.015] # az


# Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. 
# Defaults to false.
#org stamped_control: false
#stamped_control: false

# The last issued control command will be used in prediction for this period. Defaults to 0.2.
#control_timeout: 0.2

# Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
#org control_config: [true, false, false, false, false, true]
#control_config: [true, true, false, false, false, true]

# Places limits on how large the acceleration term will be. Should match your robot's kinematics.
#acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]

# Acceleration and deceleration limits are not always the same for robots.
#deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]

# If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
# gains
#acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]

# If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
# gains
#deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
